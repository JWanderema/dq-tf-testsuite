eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CgogIGJ1aWxkOgogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgaW1hZ2U6IGRvY2tlcgogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBidWlsZCAtdCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvZHEtdGYtdGVzdHN1aXRlOiR7RFJPTkVfQ09NTUlUX1NIQX0gLgoKICBpbWFnZV90b19xdWF5OgogICAgaW1hZ2U6IGRvY2tlcgogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBsb2dpbiAtdT0idWtob21lb2ZmaWNlZGlnaXRhbCtkcXRmdGVzdHN1aXRlIiAtcD0ke0RPQ0tFUl9QQVNTV09SRH0gcXVheS5pbwogICAgICAtIGRvY2tlciBwdXNoIHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9kcS10Zi10ZXN0c3VpdGU6JHtEUk9ORV9DT01NSVRfU0hBfQoKICB0YWdfYXNfbGF0ZXN0X3F1YXk6CiAgICBpbWFnZTogZG9ja2VyCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGxvZ2luIC11PSJ1a2hvbWVvZmZpY2VkaWdpdGFsK2RxdGZ0ZXN0c3VpdGUiIC1wPSR7RE9DS0VSX1BBU1NXT1JEfSBxdWF5LmlvCiAgICAgIC0gZG9ja2VyIHRhZyBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvZHEtdGYtdGVzdHN1aXRlOiR7RFJPTkVfQ09NTUlUX1NIQX0gcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2RxLXRmLXRlc3RzdWl0ZTpsYXRlc3QKICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvZHEtdGYtdGVzdHN1aXRlOmxhdGVzdAogICAgd2hlbjoKICAgICAgYnJhbmNoOiBtYXN0ZXIKICAgICAgZXZlbnQ6IHB1c2gKCgpzZXJ2aWNlczoKICBkaW5kOgogICAgaW1hZ2U6IGRvY2tlcjpkaW5kCiAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICBjb21tYW5kOgogICAgICAtICItcyIKICAgICAgLSAib3ZlcmxheSIK.EN0AI1TQDk_df9JlYshunPyeTlUOAEeFY6134eiqUJg